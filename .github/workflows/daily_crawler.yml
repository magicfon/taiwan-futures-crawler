name: 每日台期所資料爬取

on:
  schedule:
    # 每日台北時間 15:30 執行 (UTC 07:30)
    - cron: '30 7 * * *'
  # 允許手動觸發
  workflow_dispatch:
    inputs:
      date_range:
        description: '日期範圍 (格式: YYYY-MM-DD,YYYY-MM-DD 或 today)'
        required: false
        default: 'today'
      contracts:
        description: '契約代碼 (用逗號分隔，如: TX,TE,MTX)'
        required: false
        default: 'TX,TE,MTX,ZMX,NQF'
      retry_if_empty:
        description: '如果沒有資料是否重試'
        required: false
        default: 'true'

jobs:
  crawl-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: 檢出程式碼
      uses: actions/checkout@v4
      
    - name: 設定Python環境
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 安裝相依套件
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 建立輸出目錄
      run: |
        mkdir -p output
        mkdir -p logs
        mkdir -p charts
        
    - name: 設定Google Sheets認證
      env:
        GOOGLE_SHEETS_CREDENTIALS: ${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}
      run: |
        if [ -n "$GOOGLE_SHEETS_CREDENTIALS" ]; then
          mkdir -p config
          echo "$GOOGLE_SHEETS_CREDENTIALS" > config/google_sheets_credentials.json
          echo "✅ Google Sheets認證已設定（來自GitHub Secret）"
        else
          echo "⚠️ 未設定GOOGLE_SHEETS_CREDENTIALS Secret，跳過Google Sheets功能"
        fi
        
    - name: 設定Telegram通知
      env:
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      run: |
        if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
          echo "✅ Telegram通知已設定（來自GitHub Secrets）"
          # 導出環境變數供後續步驟使用
          echo "TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN" >> $GITHUB_ENV
          echo "TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID" >> $GITHUB_ENV
        else
          echo "⚠️ 未設定Telegram Secrets，跳過Telegram通知功能"
        fi
        
    - name: 時間調試檢查
      run: |
        echo "🕐 檢查系統時間設定..."
        python debug_time.py
        echo ""
        echo "系統指令檢查:"
        date
        echo "UTC時間: $(date -u)"
        
    - name: 執行爬蟲 (第一次嘗試)
      id: first_attempt
      run: |
        echo "🚀 開始第一次爬取嘗試..."
        
        if [ "${{ github.event.inputs.date_range }}" = "today" ] || [ -z "${{ github.event.inputs.date_range }}" ]; then
          # 執行今日資料爬取
          python taifex_crawler.py --date-range today --contracts ${{ github.event.inputs.contracts || 'TX,TE,MTX' }}
        else
          # 執行指定日期範圍爬取
          python taifex_crawler.py --date-range "${{ github.event.inputs.date_range }}" --contracts ${{ github.event.inputs.contracts || 'TX,TE,MTX' }}
        fi
        
        # 檢查是否有產生輸出檔案
        if [ "$(ls -A output/ 2>/dev/null)" ]; then
          echo "✅ 第一次爬取成功，有產生資料檔案"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ 第一次爬取沒有產生資料檔案"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 等待重試 (如果第一次失敗)
      if: steps.first_attempt.outputs.success == 'false' && (github.event.inputs.retry_if_empty == 'true' || github.event_name == 'schedule')
      run: |
        echo "😴 等待10分鐘後重試..."
        sleep 600  # 等待10分鐘 (600秒)
        
    - name: 執行爬蟲 (重試)
      id: retry_attempt
      if: steps.first_attempt.outputs.success == 'false' && (github.event.inputs.retry_if_empty == 'true' || github.event_name == 'schedule')
      run: |
        echo "🔄 開始重試爬取..."
        
        if [ "${{ github.event.inputs.date_range }}" = "today" ] || [ -z "${{ github.event.inputs.date_range }}" ]; then
          # 執行今日資料爬取
          python taifex_crawler.py --date-range today --contracts ${{ github.event.inputs.contracts || 'TX,TE,MTX' }}
        else
          # 執行指定日期範圍爬取
          python taifex_crawler.py --date-range "${{ github.event.inputs.date_range }}" --contracts ${{ github.event.inputs.contracts || 'TX,TE,MTX' }}
        fi
        
        # 檢查是否有產生輸出檔案
        if [ "$(ls -A output/ 2>/dev/null)" ]; then
          echo "✅ 重試爬取成功，有產生資料檔案"
          echo "success=true" >> $GITHUB_OUTPUT
        else
          echo "❌ 重試後仍然沒有資料檔案"
          echo "success=false" >> $GITHUB_OUTPUT
        fi
        
    - name: 檢查最終結果
      run: |
        FIRST_SUCCESS="${{ steps.first_attempt.outputs.success }}"
        RETRY_SUCCESS="${{ steps.retry_attempt.outputs.success }}"
        
        echo "=== 爬取結果摘要 ==="
        echo "第一次嘗試: $FIRST_SUCCESS"
        if [ "$FIRST_SUCCESS" = "false" ]; then
          echo "重試結果: $RETRY_SUCCESS"
        fi
        
        echo ""
        echo "=== 輸出目錄內容 ==="
        ls -la output/ || echo "輸出目錄為空"
        
        echo ""
        echo "=== 資料庫檔案 ==="
        if [ -d "data" ]; then
          ls -la data/
        fi
        
        echo ""
        echo "=== 報告檔案 ==="
        if [ -d "reports" ]; then
          ls -la reports/
        fi
        
        echo ""
        echo "=== 日誌內容 (最後50行) ==="
        if [ -f taifex_crawler.log ]; then
          tail -50 taifex_crawler.log
        fi
        
        # 設定失敗狀態 (如果兩次都失敗)
        if [ "$FIRST_SUCCESS" = "false" ] && [ "$RETRY_SUCCESS" = "false" ]; then
          echo "❌ 兩次爬取都失敗，請檢查台期所網站狀態"
          exit 1
        fi
        
    - name: 設定Git使用者
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'
        
    - name: 提交固定資料檔案
      run: |
        # 檢查是否有重要的固定檔案需要提交
        # 注意：某些檔案可能被.gitignore忽略，需要特別處理
        
        HAS_CHANGES=false
        
        # 檢查特定的重要檔案（這些檔案我們想要在GitHub Actions中保留）
        # 但需要考慮.gitignore的設定
        
        # 1. 檢查最新30天資料檔案
        if [ -f "output/台期所最新30天資料.xlsx" ]; then
          # 由於output/*.xlsx被忽略，我們創建一個特殊的檔案名
          cp "output/台期所最新30天資料.xlsx" "latest_30days_data.xlsx"
          git add "latest_30days_data.xlsx"
          echo "已添加: latest_30days_data.xlsx (來自output/台期所最新30天資料.xlsx)"
          HAS_CHANGES=true
        fi
        
        # 2. 檢查日誌檔案 (通常被忽略，但我們可以創建摘要)
        if [ -f taifex_crawler.log ]; then
          # 創建日誌摘要而不是整個日誌檔案
          echo "=== 最後執行摘要 ===" > execution_summary.txt
          echo "執行時間: $(date)" >> execution_summary.txt
          echo "執行結果: ${{ steps.first_attempt.outputs.success }}" >> execution_summary.txt
          echo "" >> execution_summary.txt
          echo "=== 日誌最後20行 ===" >> execution_summary.txt
          tail -20 taifex_crawler.log >> execution_summary.txt
          git add execution_summary.txt
          echo "已添加: execution_summary.txt"
          HAS_CHANGES=true
        fi
        
        # 3. 其他不被忽略的重要檔案
        if [ -f "config/spreadsheet_config.json" ]; then
          git add "config/spreadsheet_config.json"
          echo "已添加: config/spreadsheet_config.json"
          HAS_CHANGES=true
        fi
        
        # 提交變更
        if [ "$HAS_CHANGES" = true ]; then
          git commit -m "🤖 自動更新: $(date '+%Y-%m-%d %H:%M:%S') 台期所資料和執行摘要" || echo "沒有需要提交的變更"
        else
          echo "沒有重要檔案需要提交"
        fi
        
    - name: 推送更新
      run: |
        # 檢查是否有待推送的提交
        if git diff --quiet HEAD~1 HEAD 2>/dev/null; then
          echo "沒有新的提交需要推送"
        else
          git push || echo "推送失敗，可能沒有變更"
        fi
        
    - name: 上傳執行日誌
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: crawler-logs-${{ github.run_number }}
        path: |
          taifex_crawler.log
          output/
        retention-days: 30 